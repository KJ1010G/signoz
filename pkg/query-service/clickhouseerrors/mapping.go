package clickhouseerrors

import (
	"regexp"
	"strconv"
)

// example format `code: 47, message:`

var errorCodeRegex = regexp.MustCompile(`code: (\d+), message:`)

func GetHTTPStatusCodeFromErrorCode(errorCode int) int {
	switch errorCode {
	case 0:
		return 200 // OK
	case 1:
		return 405 // Method Not Allowed
	case 2, 3, 4, 6, 9, 11, 12, 13, 15, 16, 19, 20, 24, 25, 26, 27, 28, 36, 37, 38, 40, 41, 42, 43, 44, 47, 50, 52, 53, 59, 62, 69, 70, 72, 79, 80, 92, 116, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 133, 134, 135, 137, 138, 139, 145, 152, 153, 162, 166, 167, 168, 169, 170, 179, 186, 187, 189, 190, 191, 238, 248, 257, 264, 283, 295, 308, 312, 321, 341, 353, 370, 377, 378, 388, 406, 407, 431, 432, 433, 438, 440, 450, 456, 457, 490, 491, 509, 512, 523, 552, 559, 565, 621, 632, 642, 643, 648, 653, 675, 691, 702, 703, 704, 719:
		return 400 // Bad Request
	case 5, 29, 30, 31, 49, 64, 65, 66, 67, 89, 105, 106, 158, 159, 160, 161, 165, 173, 185, 205, 210, 239, 243, 249, 268, 269, 270, 271, 274, 275, 277, 290, 298, 299, 300, 301, 302, 306, 307, 310, 311, 326, 327, 328, 332, 333, 334, 336, 337, 338, 339, 340, 342, 344, 345, 348, 349, 354, 355, 356, 360, 362, 363, 364, 365, 367, 368, 375, 376, 391, 392, 393, 394, 395, 396, 398, 400, 404, 410, 411, 412, 413, 414, 416, 422, 428, 435, 439, 441, 443, 448, 449, 452, 453, 454, 455, 460, 461, 468, 469, 470, 475, 476, 477, 487, 505, 507, 510, 513, 518, 522, 526, 530, 531, 532, 535, 539, 540, 541, 542, 543, 544, 545, 546, 547, 553, 554, 557, 558, 561, 564, 572, 573, 575, 576, 577, 578, 589, 590, 591, 592, 596, 598, 599, 600, 601, 603, 604, 606, 607, 608, 615, 616, 617, 618, 619, 620, 624, 625, 631, 634, 650, 659, 660, 661, 662, 663, 664, 676, 677, 678, 679, 690, 693, 694, 695, 696, 697, 698, 699, 706, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 722, 723, 900, 901:
		return 500 // Internal Server Error
	case 7, 8, 10, 51, 56, 57, 58, 60, 81, 82, 83, 84, 107, 142, 163, 206, 207, 208, 215, 218, 329, 335, 352, 385, 442, 478, 492, 493, 494, 495, 556, 562, 563, 568, 571, 597, 602, 605, 610, 670, 674:
		return 400 // Bad Request
	case 14, 17, 18, 21, 22, 45, 54, 61, 93, 99, 100, 101, 103, 104, 108, 109, 110, 111, 112, 114, 118, 126, 131, 132, 136, 140, 143, 144, 146, 147, 148, 149, 150, 151, 154, 155, 157, 171, 174, 175, 176, 177, 178, 181, 188, 197, 198, 199, 200, 201, 202, 203, 204, 209, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 240, 241, 242, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 267, 272, 273, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 291, 292, 294, 296, 297, 303, 304, 305, 309, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 330, 331, 343, 346, 347, 350, 351, 357, 358, 359, 361, 369, 371, 372, 373, 374, 379, 380, 383, 386, 387, 389, 390, 397, 399, 401, 402, 403, 405, 408, 409, 415, 417, 418, 419, 420, 421, 423, 424, 425, 426, 427, 429, 430, 434, 436, 437, 444, 445, 446, 447, 451, 458, 459, 462, 466, 467, 471, 472, 473, 474, 488, 489, 496, 497, 498, 500, 501, 502, 503, 506, 508, 511, 514, 515, 516, 517, 524, 525, 527, 528, 529, 533, 534, 536, 537, 538, 548, 549, 550, 551, 555, 560, 566, 567, 569, 570, 574, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 593, 594, 595, 609, 611, 612, 613, 614, 626, 627, 628, 629, 633, 635, 636, 637, 638, 639, 640, 641, 645, 647, 649, 651, 652, 654, 655, 656, 657, 658, 665, 666, 667, 668, 669, 671, 672, 673, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 692, 700, 701, 705, 720, 721, 724, 725, 726:
		return 500 // Internal Server Error
	case 34, 35, 55, 68, 90, 91, 94, 117:
		return 400 // Bad Request
	case 46, 48, 63, 78, 85, 115, 119, 141, 164, 182, 183, 184:
		return 400 // Bad Request
	case 73, 479, 480, 481, 482, 483, 484, 485, 486, 711:
		return 403 // Forbidden
	case 102:
		return 400 // Bad Request
	case 113, 192, 193, 194, 195, 293:
		return 401 // Unauthorized
	case 630:
		return 507 // Insufficient Storage
	case 381:
		return 411 // Length Required
	case 504:
		return 409 // Conflict
	default:
		return 500 // Internal Server Error
	}
}

func GetHTTPStatusCodeFromErrorMsg(errorMsg string) int {
	matches := errorCodeRegex.FindStringSubmatch(errorMsg)
	if len(matches) != 2 {
		return 500 // Internal Server Error
	}
	errorCode, err := strconv.Atoi(matches[1])
	if err != nil {
		return 500 // Internal Server Error
	}
	return GetHTTPStatusCodeFromErrorCode(errorCode)
}
